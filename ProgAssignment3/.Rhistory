return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# Get hospital names:
hosname <- substate[,2]
## Return hospital name in that state with lowest 30-day death rate
if(outcome == "heart attack"){
return(hosname[substate[,11] == min(substate[,11], na.rm = TRUE)])
} else if(outcome == "heart failue"){
return(hosname[substate[,17] == min(substate[,17], na.rm = TRUE)])
} else {
return(hosname[substate[,23] == min(substate[,23], na.rm = TRUE)])
}
}
best("MD", "heart attack")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart f3ailure", 4)
rankhospital("TX", "heart faile", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
n <- sum(dat[,7]==state) # number of hostpitals in the state
substate <- dat[dat[,7]==state,]
# Get hospital names:
hosname <- substate[,2]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
return(hosname[substate[,11] == sort(substate[,11],partial=rank)[rank]][1])
} else if(outcome == "heart failue") {
return(hosname[substate[,17] == sort(substate[,17],partial=rank)[rank]][1])
} else {
return(hosname[substate[,23] == sort(substate[,23],partial=rank)[rank]][1])
}
}
rankhospital("TX", "heart faile", 4)
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
n <- sum(dat[,7]==state) # number of hostpitals in the state
substate <- dat[dat[,7]==state,]
# Get hospital names:
hosname <- substate[,2]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
return(hosname[substate[,11] == sort(substate[,11],partial=rank)[rank]][1])
} else if(outcome == "heart failure") {
return(hosname[substate[,17] == sort(substate[,17],partial=rank)[rank]][1])
} else {
return(hosname[substate[,23] == sort(substate[,23],partial=rank)[rank]][1])
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failue", 4)
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
n <- sum(dat[,7]==state) # number of hostpitals in the state
substate <- dat[dat[,7]==state,]
# Get hospital names:
hosname <- substate[,2]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
return(hosname[substate[,11] == sort(substate[,11],partial=rank)[rank]][1])
} else if(outcome == "heart failure") {
return(hosname[substate[,17] == sort(substate[,17],partial=rank)[rank]][1])
} else {
return(hosname[substate[,23] == sort(substate[,23],partial=rank)[rank]][1])
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# Get number of hospital with data
if(outcome == "heart attack") {
n <- dim(substate[!is.na(substate[,11]), ])[1]
} else if(outcome == "heart failure") {
n <- dim(substate[!is.na(substate[,17]), ])[1]
} else {
n <- dim(substate[!is.na(substate[,23]), ])[1]
}
# Get hospital names:
hosname <- substate[,2]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
result <- hosname[order(substate[,11], hosname)[rank]]
return(result)
} else if(outcome == "heart failure") {
result <- hosname[order(substate[,17], hosname)[rank]]
return(result)
} else {
result <- hosname[order(substate[,23], hosname)[rank]]
return(result)
}
}
rankhospital("TX", "heart failure", 4)
num_helper <- function(data, col_num, state, num) {
state_subset <- data[data[, 7]==state, ]
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- state_subset[, col_num]
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rank_helper <- function(state_subset, outcome_arr, num) {
result <- state_subset[, 2][order(outcome_arr, state_subset[, 2])[num]]
return(result)
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if (num == "best") {
rank <- beast(state, outcome)
} else {
if(outcome == "heart attack") {
rank <- num_helper(data, 11, state, num)
} else if(outcome == "heart failure") {
rank <- num_helper(data, 17, state, num)
} else {
rank <- num_helper(data, 23, state, num)
}
}
result <- rank
return(result)
}
}
rankhospital("TX", "heart failure", 4)
num_helper <- function(data, col_num, state, num) {
state_subset <- data[data[, 7]==state, ]
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- state_subset[, col_num]
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rank_helper <- function(state_subset, outcome_arr, num) {
result <- state_subset[, 2][order(outcome_arr, state_subset[, 2])[num]]
return(result)
}
rankhospital <- function(state, outcome, num = "best") {
# read the data file
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if (num == "best") {
rank <- beast(state, outcome)
} else {
if(outcome == "heart attack") {
rank <- num_helper(data, 11, state, num)
} else if(outcome == "heart failure") {
rank <- num_helper(data, 17, state, num)
} else {
rank <- num_helper(data, 23, state, num)
}
}
result <- rank
return(result)
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# Get number of hospital with data
#*******
# Get hospital names:
hosname <- substate[,2]
# handle special case
# *****
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
result <- hosname[order(substate[,11], hosname)[rank]]
return(result)
} else if(outcome == "heart failure") {
result <- hosname[order(substate[,17], hosname)[rank]]
return(result)
} else {
result <- hosname[order(substate[,23], hosname)[rank]]
return(result)
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# Get number of hospital with data
#*******
# Get hospital names:
hosname <- substate[,2]
# handle special case
# *****
result <- hosname[order(substate[,17], hosname)[num]]
return(result)
}
rankhospital("TX", "heart failure", 4)
substate <- dat[dat[,7]==state,]
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
substate <- dat[dat[,7]==state,]
substate
hosname <- substate[,2]
hosname
order(hosname)
hosname[order(hosname)]
hosname[order(substate[,17])]
substate[,17]
order(substate[,17])
substate[,17][order(substate[,17])]
substate[,17]
sort.list(substate[,17])
substate[,17][sort.list(substate[,17])]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
n <- sum(dat[,7]==state) # number of hostpitals in the state
substate <- dat[dat[,7]==state,]
# Get hospital names:
hosname <- substate[,2]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
return(hosname[substate[,11] == sort(substate[,11],partial=rank)[rank]][1])
} else if(outcome == "heart failure") {
return(hosname[substate[,17] == sort(substate[,17],partial=rank)[rank]][1])
} else {
return(hosname[substate[,23] == sort(substate[,23],partial=rank)[rank]][1])
}
}
rankhospital("TX", "heart failure", 4)
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
dat[, 11] <- as.numeric(dat[, 11]) # heart attack
dat[, 17] <- as.numeric(dat[, 17]) # heart failure
dat[, 23] <- as.numeric(dat[, 23]) # pneumonia
substate[,17]
sort.list(substate[,17])
substate[,17][sort.list(substate[,17])]
substate[,17][order(substate[,17])]
dat[, 11] <- as.numeric(dat[, 11]) # heart attack
dat[, 17] <- as.numeric(dat[, 17]) # heart failure
dat[, 23] <- as.numeric(dat[, 23]) # pneumonia
substate[,17][sort.list(substate[,17])]
substate[, 11] <- as.numeric(substate[, 11]) # heart attack
substate[, 17] <- as.numeric(substate[, 17]) # heart failure
substate[, 23] <- as.numeric(substate[, 23]) # pneumonia
substate[,17][order(substate[,17])]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# Get number of hospital with data
if(outcome == "heart attack") {
n <- dim(substate[!is.na(substate[,11]), ])[1]
} else if(outcome == "heart failure") {
n <- dim(substate[!is.na(substate[,17]), ])[1]
} else {
n <- dim(substate[!is.na(substate[,23]), ])[1]
}
# Get hospital names:
hosname <- substate[,2]
hosname[order(substate[,17])]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
# change data type from character to numeric
substate[, 11] <- as.numeric(substate[, 11]) # heart attack
substate[, 17] <- as.numeric(substate[, 17]) # heart failure
substate[, 23] <- as.numeric(substate[, 23]) # pneumonia
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
result <- hosname[order(substate[,11], hosname)[rank]]
return(result)
} else if(outcome == "heart failure") {
result <- hosname[order(substate[,17], hosname)[rank]]
return(result)
} else {
result <- hosname[order(substate[,23], hosname)[rank]]
return(result)
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% dat[,7]){
return(message("invalid state"))
}
if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
return(message("invalid outcome"))
}
# Filter state:
substate <- dat[dat[,7]==state,]
# change data type from character to numeric
substate[, 11] <- as.numeric(substate[, 11]) # heart attack
substate[, 17] <- as.numeric(substate[, 17]) # heart failure
substate[, 23] <- as.numeric(substate[, 23]) # pneumonia
# Get number of hospital with data
if(outcome == "heart attack") {
n <- dim(substate[!is.na(substate[,11]), ])[1]
} else if(outcome == "heart failure") {
n <- dim(substate[!is.na(substate[,17]), ])[1]
} else {
n <- dim(substate[!is.na(substate[,23]), ])[1]
}
# Get hospital names:
hosname <- substate[,2]
hosname[order(substate[,17])]
# Handle special cases:
if(num == "best") {
rank <- 1
} else if(num == "worst"){
rank <- n # number of hostpitals in the state
} else if(num > n) {
return(NA)
} else {
rank <- num
}
## Return hospital name in that state with the given rank
if(outcome == "heart attack") {
result <- hosname[order(substate[,11], hosname)[rank]]
return(result)
} else if(outcome == "heart failure") {
result <- hosname[order(substate[,17], hosname)[rank]]
return(result)
} else {
result <- hosname[order(substate[,23], hosname)[rank]]
return(result)
}
}
rankhospital("MD", "heart attack", "worst")
str(split)
split(dat,dat[,7])
dat[,7]
split(dat,dat$state)
split(dat,dat$State)
split(dat,dat$State="TX")
split(dat,dat$State=="TX")
dat$State
summary(dat$State)
statevec <- sort(unique(dat$State))
statevec
rankall <- function(outcome, num = "best") {  ## Read outcome data  dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")  ## Check that state and outcome are valid  if(!state %in% dat[,7]){    stop("invalid state")  }  if(!outcome %in% c("heart attack", "heart failure", "pneumonia")) {    stop("invalid outcome")  }  # Change data type from character to numeric  dat[, 11] <- as.numeric(dat[, 11]) # heart attack  dat[, 17] <- as.numeric(dat[, 17]) # heart failure  dat[, 23] <- as.numeric(dat[, 23]) # pneumonia    # Get number of hospital with data  if(outcome == "heart attack") {    n <- dim(substate[!is.na(substate[,11]), ])[1]  } else if(outcome == "heart failure") {    n <- dim(substate[!is.na(substate[,17]), ])[1]  } else {    n <- dim(substate[!is.na(substate[,23]), ])[1]  }  # Find all states:  statevec <- sort(unique(dat$State))  # Initialize:  hosplist <- rep("", length(statevec))  ## For each state, find the hospital of the given rank  for(i in 1:length(statevec)){    substate <- dat[dat$State == statevec[i], ]    hosname <- substate[,2    if(outcome == "heart attack") {      hosplist[i] <- hosname[order(substate[,11], hosname)[num]]    } else if (outcome == "heart failure") {      hosplist[i] <- hosname[order(substate[,17], hosname)[num]]    } else {      hosplist[i] <- hosname[order(substate[,23], hosname)[num]]     }  }  output <- data.frame("hospital"=hosplist,"state"=statevec)    }
